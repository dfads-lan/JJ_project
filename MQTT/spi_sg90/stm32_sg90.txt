#include "stm32f10x.h"

#define SPI_RX_BUFFER_SIZE   1

volatile uint8_t spi_rx_buffer[SPI_RX_BUFFER_SIZE];
volatile uint8_t spi_rx_index = 0;
volatile uint8_t spi_rx_data  = 0;
volatile uint8_t new_data_received = 0;

/* ---------- 函数声明 ---------- */
void RCC_Configuration(void);
void GPIO_Configuration(void);
void TIM2_Configuration(void);
void SPI1_Configuration(void);
void NVIC_Configuration(void);
void UpdateServoPosition(uint8_t angle);

/* ---------- 时钟 ---------- */
void RCC_Configuration(void)
{
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA |
                           RCC_APB2Periph_SPI1  |
                           RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
}

/* ---------- GPIO ---------- */
void GPIO_Configuration(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /* TIM2_CH1 -> PA0  (PWM) */
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    /* SPI1 SCK  PA5  / MOSI PA7 / MISO PA6 */
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_5 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;         /* MISO 输入即可 */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}

/* ---------- TIM2 PWM ---------- */
void TIM2_Configuration(void)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef        TIM_OCInitStructure;

    /* 72 MHz / (72-1+1) = 1 MHz计数频率；20 000 次 = 20 ms 周期 */
    TIM_TimeBaseStructure.TIM_Period        = 20000 - 1;
    TIM_TimeBaseStructure.TIM_Prescaler     = 72  - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

    /* PWM1 模式，通道1 */
    TIM_OCInitStructure.TIM_OCMode      = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse       = 1500;   /* 1.5 ms 中位 */
    TIM_OCInitStructure.TIM_OCPolarity  = TIM_OCPolarity_High;
    TIM_OC1Init(TIM2, &TIM_OCInitStructure);

    TIM_Cmd(TIM2, DISABLE);   /* 先关闭，等有角度再开 */
}

/* ---------- SPI1 主模式 ---------- */
void SPI1_Configuration(void)
{
    SPI_InitTypeDef SPI_InitStructure;

    /* 主模式，8 位，CPOL=0, CPHA=0 → Mode0 */
    SPI_InitStructure.SPI_Direction         = SPI_Direction_2Lines_FullDuplex;
    SPI_InitStructure.SPI_Mode              = SPI_Mode_Master;
    SPI_InitStructure.SPI_DataSize          = SPI_DataSize_8b;
    SPI_InitStructure.SPI_CPOL              = SPI_CPOL_Low;
    SPI_InitStructure.SPI_CPHA              = SPI_CPHA_1Edge;
    SPI_InitStructure.SPI_NSS               = SPI_NSS_Soft;   /* 软件片选 */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
    SPI_InitStructure.SPI_FirstBit          = SPI_FirstBit_MSB;
    SPI_InitStructure.SPI_CRCPolynomial     = 7;
    SPI_Init(SPI1, &SPI_InitStructure);

    SPI_Cmd(SPI1, ENABLE);

    /* 使能接收缓冲区非空中断 */
    SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
}

/* ---------- NVIC ---------- */
void NVIC_Configuration(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel                   = SPI1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
}

/* ---------- 舵机角度更新 ---------- */
void UpdateServoPosition(uint8_t angle)
{
    /* 0°→500us，180°→2500us，线性映射 */
    uint16_t pulse = (uint16_t)(angle * 11.11f + 500);
    TIM_SetCompare1(TIM2, pulse);
    TIM_Cmd(TIM2, ENABLE);
}

/* ---------- SPI1 中断服务 ---------- */
void SPI1_IRQHandler(void)
{
    if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) != RESET)
    {
        spi_rx_buffer[spi_rx_index++] = SPI_I2S_ReceiveData(SPI1);
        if (spi_rx_index >= SPI_RX_BUFFER_SIZE)
        {
            spi_rx_index = 0;
            spi_rx_data  = spi_rx_buffer[0];
            new_data_received = 1;
        }
    }
}

/* ---------- 主函数 ---------- */
int main(void)
{
    SystemInit();
    RCC_Configuration();
    GPIO_Configuration();
    TIM2_Configuration();
    SPI1_Configuration();
    NVIC_Configuration();

    while (1)
    {
        if (new_data_received)
        {
            if (spi_rx_data <= 180)          /* 角度范围检查 */
                UpdateServoPosition(spi_rx_data);
            new_data_received = 0;
        }
    }
}
　SCK  → PA5（AF_PP，50 MHz）
　MISO → PA6（Input floating / AF_PP 均可，主模式时不用）
　MOSI → PA7（AF_PP，50 MHz）
　NSS  → PA4（Input floating / 硬件片选，主模式可忽略）