#include <linux/module.h>
#include <linux/spi/spi.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/of_gpio.h>
#include <linux/slab.h>
#include <linux/uaccess.h>

#define SG90_NAME "sg90"
#define SG90_CNT 1

struct sg90_dev {
    dev_t devid;
    struct cdev cdev;
    struct class *class;
    struct device *device;
    struct spi_device *spi;
    int major;
    struct mutex lock; // 添加互斥锁
};

static struct sg90_dev *sg90_devp; // 设备实例指针

// SPI写数据函数
static int sg90_write_angle(struct sg90_dev *dev, u8 angle) {
    u8 tx_buf[1] = {angle};
    struct spi_transfer t = {
        .tx_buf = tx_buf,
        .len = 1,
    };
    struct spi_message m;
    int ret;

    spi_message_init(&m);
    spi_message_add_tail(&t, &m);
    mutex_lock(&dev->lock); // 加锁
    ret = spi_sync(dev->spi, &m);
    mutex_unlock(&dev->lock); // 解锁
    return ret;
}

// 文件操作接口 - write
static ssize_t sg90_write(struct file *filp, const char __user *buf, size_t cnt, loff_t *off) {
    u8 angle;
    struct sg90_dev *dev = filp->private_data;

    if (cnt != 1) // 只允许写入1字节
        return -EINVAL;

    if (copy_from_user(&angle, buf, 1))
        return -EFAULT;

    if (angle > 180) // 角度范围校验
        return -EINVAL;

    if (sg90_write_angle(dev, angle) < 0)
        return -EIO;

    return 1;
}

// 文件操作接口 - open
static int sg90_open(struct inode *inode, struct file *filp) {
    struct sg90_dev *dev = container_of(inode->i_cdev, struct sg90_dev, cdev);
    filp->private_data = dev; // 保存设备指针到file结构
    return 0;
}

// 文件操作接口 - release
static int sg90_release(struct inode *inode, struct file *filp) {
    return 0;
}

static const struct file_operations sg90_fops = {
    .owner = THIS_MODULE,
    .open = sg90_open,
    .write = sg90_write,
    .release = sg90_release,
};

// SPI驱动probe函数
static int sg90_probe(struct spi_device *spi) {
    int ret;
    struct sg90_dev *dev;

    // 分配设备内存
    dev = devm_kzalloc(&spi->dev, sizeof(*dev), GFP_KERNEL);
    if (!dev)
        return -ENOMEM;

    // 初始化互斥锁
    mutex_init(&dev->lock);

    // 注册字符设备
    ret = alloc_chrdev_region(&dev->devid, 0, SG90_CNT, SG90_NAME);
    if (ret < 0) {
        dev_err(&spi->dev, "alloc_chrdev_region failed\n");
        return ret;
    }
    dev->major = MAJOR(dev->devid);

    // 初始化cdev
    cdev_init(&dev->cdev, &sg90_fops);
    ret = cdev_add(&dev->cdev, dev->devid, SG90_CNT);
    if (ret < 0) {
        dev_err(&spi->dev, "cdev_add failed\n");
        goto err_cdev;
    }

    // 创建类和设备
    dev->class = class_create(THIS_MODULE, SG90_NAME);
    if (IS_ERR(dev->class)) {
        ret = PTR_ERR(dev->class);
        goto err_class;
    }

    dev->device = device_create(dev->class, NULL, dev->devid, NULL, SG90_NAME);
    if (IS_ERR(dev->device)) {
        ret = PTR_ERR(dev->device);
        goto err_device;
    }

    // 保存spi_device指针
    dev->spi = spi;
    spi_set_drvdata(spi, dev); // 将dev保存到spi_device的driver_data

    // 配置SPI模式
    spi->mode = SPI_MODE_0;
    spi->max_speed_hz = 1000000; // 1MHz
    spi_setup(spi);

    sg90_devp = dev; // 保存全局设备指针
    dev_info(&spi->dev, "SG90 driver probed\n");
    return 0;

// 错误处理路径
err_device:
    class_destroy(dev->class);
err_class:
    cdev_del(&dev->cdev);
err_cdev:
    unregister_chrdev_region(dev->devid, SG90_CNT);
    return ret;
}

// SPI驱动remove函数
static int sg90_remove(struct spi_device *spi) {
    struct sg90_dev *dev = spi_get_drvdata(spi);

    device_destroy(dev->class, dev->devid);
    class_destroy(dev->class);
    cdev_del(&dev->cdev);
    unregister_chrdev_region(dev->devid, SG90_CNT);
    mutex_destroy(&dev->lock); // 销毁互斥锁
    dev_info(&spi->dev, "SG90 driver removed\n");
    return 0;
}

// 设备树匹配表
static const struct of_device_id sg90_of_match[] = {
    { .compatible = "alientek,sg90" },
    { /* Sentinel */ }
};
MODULE_DEVICE_TABLE(of, sg90_of_match);

// SPI驱动结构体
static struct spi_driver sg90_driver = {
    .driver = {
        .name = SG90_NAME,
        .of_match_table = sg90_of_match,
    },
    .probe = sg90_probe,
    .remove = sg90_remove,
};

module_spi_driver(sg90_driver);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("SG90 Servo Control Driver via SPI");